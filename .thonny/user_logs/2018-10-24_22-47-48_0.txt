[
    {
        "sequence": "ShowView",
        "view_id": "GlobalsView",
        "time": "2018-10-24T22:47:48.231224",
        "view_class": "GlobalsView"
    },
    {
        "editor_class": "Editor",
        "text_widget_id": 1972000144,
        "time": "2018-10-24T22:47:48.262735",
        "sequence": "EditorTextCreated",
        "editor_id": 1972001488,
        "text_widget_class": "CodeViewText"
    },
    {
        "editor_class": "Editor",
        "text_widget_id": 1972000144,
        "time": "2018-10-24T22:47:48.263929",
        "sequence": "Open",
        "editor_id": 1972001488,
        "filename": "/home/pi/Downloads/page/coba_support.py",
        "text_widget_class": "CodeViewText"
    },
    {
        "text_widget_class": "CodeViewText",
        "time": "2018-10-24T22:47:48.342146",
        "text_widget_id": 1972000144,
        "sequence": "TextDelete",
        "index1": "1.0",
        "index2": "2.0"
    },
    {
        "text_widget_id": 1972000144,
        "time": "2018-10-24T22:47:48.366601",
        "text": "#! /usr/bin/env python\n#  -*- coding: utf-8 -*-\n#\n# Support module generated by PAGE version 4.17\n# In conjunction with Tcl version 8.6\n#    Oct 15, 2018 02:06:38 PM WIB  platform: Linux\n#    Oct 15, 2018 04:03:52 PM WIB  platform: Linux\nimport threading\nimport sys\n##from multiprocessing import Process\n##sys.path.insert(0, 'MiBand2/')\n##import time\n##from base import MiBand2\n##from constants import ALERT_TYPES\n##\n###MAC ADDRESS MI BAND 2\n##MAC = 'D6:EC:F2:B3:70:BA'\nimport time \nimport coba\nimport os\n##import thread\n\ntry:\n    from Tkinter import *\nexcept ImportError:\n    from tkinter import *\n\ntry:\n    import ttk\n    py3 = False\nexcept ImportError:\n    import tkinter.ttk as ttk\n    py3 = True\n\ndef recap():\n    print('coba_support.recap')\n    sys.stdout.flush()\n    import recap\n    recap.create_Treadmill(root, 'new')\n    \nstate = False\n# Our time structure [min, sec, centsec]\ntimer = [0, 0, 0]\n# The format is padding all the \npattern = '{0:02d}:{1:02d}:{2:02d}'\n\ndef update_timeText():\n    if (state):\n        global timer\n        global root\n        # Every time this function is called, \n        # we will increment 1 centisecond (1/100 of a second)\n        timer[2] += 1\n        \n        # Every 100 centisecond is equal to 1 second\n        if (timer[2] >= 100):\n            timer[2] = 0\n            timer[1] += 1\n        # Every 60 seconds is equal to 1 min\n        if (timer[1] >= 60):\n            timer[0] += 1\n            timer[1] = 0\n        # We create our time string here\n        timeString = pattern.format(timer[0], timer[1], timer[2])\n        w.timer.configure(text=timeString)\n    root.after(10,update_timeText)\n\n##state = False\n### Our time structure [min, sec, centsec]\n##timer = [0, 0, 0]\n### The format is padding all the \n##pattern = '{0:02d}:{1:02d}:{2:02d}'\n\ndef data():\n##    while True:\n    if(state):\n        fp = open('log.txt', 'r',os.O_NONBLOCK).read()\n        lines = fp.split('\\n')\n        batas = len(lines)-2\n\n        waktu = []\n        bpm = []\n        step = []\n\n        for line in lines[batas:]:\n            if len(line)>= 1:\n                a, b, c = line.split(',')\n            waktu.append(str(a))\n            bpm.append(str(b))\n            step.append(str(c))\n##        bpm = bpm[1]\n##        step = step[1]\n        w.hr_val.configure(text=bpm[1])\n        w.step_value.configure(text=step[1])\n        print (bpm[1],step[1])\n##    time.sleep(2.3)\n        root.after(1000,data)\n\ndef start():\n    print('coba_support.start')\n    sys.stdout.flush()\n    global state\n    state = True\n##    t1=threading.Thread(target=update_timeText)\n##    t2=threading.Thread(target=data)\n##    t1.start()\n##    t1.join()\n    \n    update_timeText()\n##    p1 = Process(target = update_timeText)\n##    p1.start()\n##    p1.join()\n    w.start.configure(text=\"Finish\", command=finish)\n##    t2.start()\n##    t2.join()\n##    w.hr_val.configure(text=bpm[1])\n##    w.step_value.configure(text=step[1])\n##    thread.start_new_thread(data())\n    data()\n##    p2 = Process(target = data)\n##    p2.start()\n##    p1.join()\n##    p2.join()\n\ndef finish():\n    print('coba_support.finish')\n    sys.stdout.flush()\n    global state\n    state = False\n    update_timeText()\n    data()\n    w.start.configure(text=\"Restart\", command=reset)\n\ndef reset():\n    global timer\n    timer = [0, 0, 0]\n    w.timer.configure(text='00:00:00')\n    w.hr_val.configure(text='0')\n    w.step_value.configure(text='0')\n    w.start.configure(text=\"Start\", command=start)\n    \ndef speed_down():\n    print('coba_support.speed_down')\n    sys.stdout.flush()\n\ndef speed_up():\n    print('coba_support.speed_up')\n    sys.stdout.flush()\n\ndef init(top, gui, *args, **kwargs):\n    global w, top_level, root\n    w = gui\n    top_level = top\n    root = top\n\ndef destroy_window():\n    # Function which closes the window.\n    global top_level\n    top_level.destroy()\n    top_level = None\n\nif __name__ == '__main__':\n    import coba\n    coba.vp_start_gui()\n\n\n\n\n\n\n\n",
        "sequence": "TextInsert",
        "index": "1.0",
        "text_widget_class": "CodeViewText",
        "tags": "()"
    },
    {
        "sequence": "ShowView",
        "view_id": "ShellView",
        "time": "2018-10-24T22:47:48.386346",
        "view_class": "ShellView"
    },
    {
        "sequence": "<FocusIn>",
        "widget_id": 1984306640,
        "widget_class": "Workbench",
        "time": "2018-10-24T22:47:48.716614"
    },
    {
        "text_widget_context": "shell",
        "text_widget_id": 1971945968,
        "time": "2018-10-24T22:47:48.734910",
        "text": "Python 3.5.3 (/usr/bin/python3)",
        "sequence": "TextInsert",
        "index": "1.0",
        "text_widget_class": "ShellText",
        "tags": "('welcome',)"
    },
    {
        "text_widget_context": "shell",
        "text_widget_id": 1971945968,
        "time": "2018-10-24T22:47:48.737061",
        "text": "\n",
        "sequence": "TextInsert",
        "index": "1.31",
        "text_widget_class": "ShellText",
        "tags": "('io',)"
    },
    {
        "text_widget_context": "shell",
        "text_widget_id": 1971945968,
        "time": "2018-10-24T22:47:48.738639",
        "text": ">>> ",
        "sequence": "TextInsert",
        "index": "2.0",
        "text_widget_class": "ShellText",
        "tags": "('toplevel', 'prompt')"
    }
]